{ lib, ... }:
{
  config.perSystem =
    { pkgs, ... }:
    let
      l = lib // builtins;
      t = l.types;

      flakeNixOptions =
        { config, ... }:
        let
          printFlakeInputs =
            x:
            {
              "set" = ''
                {
                  ${l.strings.concatStrings (
                    l.attrsets.mapAttrsToList (name: value: ''"${name}" = ${printFlakeInputs value};'') x
                  )}
                }
              '';
              "int" = l.toString x;
              "bool" = if x then "true" else "false";
              "string" = ''"${x}"'';
              "list" = "[ ${l.concatStringsSep " " (printFlakeInputs x)} ]";
              "float" = l.toString x;
            }
            ."${l.typeOf x}";

          flakeNixFile =
            let
              flakeDescription = config.description;
              flakeInputs =
                let
                  i = config.baseFlakeInputs // config.extraInputs // config.inputs;
                in
                assert l.assertMsg (i ? flake-parts) ''
                  The flake inputs must contain flake-parts!
                  To fix this, add the `flake-parts` input into the `${flakeConfigPathString}.inputs` option.
                '';
                i;
              flakeModules = config.baseFlakeModules ++ config.extraFlakeModules ++ config.modules;
            in
            pkgs.writeText "flake-not-formatted" ''
              # This file was generated by nix4dev.
              {
                ${l.strings.optionalString (flakeDescription != null) ''description = "${flakeDescription}";''}

                # To change flake inputs, use the `${flakeConfigPathString}.inputs` option.
                inputs = ${printFlakeInputs flakeInputs};

                outputs = inputs:
                  inputs.flake-parts.lib.mkFlake
                  {inherit inputs;}
                  {
                    imports =
                      let
                        l = inputs.flake-parts.inputs.nixpkgs-lib.lib // builtins;
                        assertFileExists = path: msg: assert (
                          l.asserts.assertMsg
                          (l.filesystem.pathIsRegularFile path)
                          msg
                        ); path;
                      in [
                        ${l.strings.concatStringsSep " " flakeModules}
                        (
                          assertFileExists
                          ./flake-modules/default.nix
                          '''
                            Default flake module not found. To create an empty default module execute:

                            mkdir -p ./flake-modules
                            echo "{}" > ./flake-modules/default.nix

                            in the directory containing the flake.nix file.
                          '''
                        )
                      ];
                  };
              }
            '';

          flakeConfigPathString =
            l.strings.concatMapStringsSep "." lib.strings.escapeNixIdentifier
              config.flakeConfigPath;
        in
        {
          options = {
            inputs = l.mkOption {
              type = t.attrsOf t.anything;
              description = ''
                Inputs for the flake.
                The format of this option must be attrset of valid flake inputs.
              '';
              example = ''
                {
                  foo.url = "github:NixOS/nixpkgs/nixos-25.05";
                }
              '';
              default = { };
            };

            modules = l.mkOption {
              type = t.listOf t.str;
              description = ''
                Flake modules to import from the generated flake.nix file.
              '';
              example = [ "nix4dev.flakeModules.default" ];
              default = [ ];
            };

            extraInputs = l.mkOption {
              type = t.attrsOf t.anything;
              description = ''
                Extra inputs for the flake.
                The format of this option must be attrset of valid flake inputs.
              '';
              example = ''
                {
                  foo.url = "github:NixOS/nixpkgs/nixos-25.05";
                }
              '';
              default = { };
              defaultText = l.literalExpression "{}";
              apply =
                v:
                if v != { } then
                  l.warn ''
                    `${flakeConfigPathString}`.extraInputs was deprecated.
                    Use the `${flakeConfigPathString}.inputs` option instead.
                  '' v
                else
                  v;
            };

            extraFlakeModules = l.mkOption {
              type = t.listOf t.str;
              description = ''
                Extra flake modules to import from the generated flake.nix file.
              '';
              default = [ ];
              defaultText = l.literalExpression "[]";
              apply =
                v:
                if v != [ ] then
                  l.warn ''
                    `${flakeConfigPathString}.extraFlakeModules` was deprecated.
                    Use the `${flakeConfigPathString}.modules` option instead.
                  '' v
                else
                  v;
            };

            description = l.mkOption {
              type = t.nullOr t.str;
              description = ''
                Flake description. This will be set into flake's `description` attribute.
              '';
              example = "A very cool flake!";
              default = null;
            };

            baseFlakeInputs = l.mkOption {
              type = t.attrsOf t.anything;
              description = ''
                The list of flake inputs to add into the generated flake.nix file.
              '';
              visible = false;
              default = { };
              apply =
                v:
                if v != { } then
                  l.warn ''
                    `${flakeConfigPathString}.baseFlakeInputs` was deprecated.
                    Use the `${flakeConfigPathString}.inputs` option instead.
                  '' v
                else
                  v;
            };

            baseFlakeModules = l.mkOption {
              type = t.listOf t.str;
              description = ''
                Flake modules to import from the generated flake.nix file.
              '';
              visible = false;
              default = [ ];
              apply =
                v:
                if v != [ ] then
                  l.warn ''
                    `${flakeConfigPathString}.baseFlakeModules` was deprecated.
                    Use the `${flakeConfigPathString}.modules` option instead.
                  '' v
                else
                  v;
            };

            flakeConfigPath = l.mkOption {
              type = t.listOf t.str;
              description = ''
                The attribute path to the flake settings, under which resides e.g. this option.
              '';
              example = [
                "nix4dev"
                "flake"
              ];
              visible = false;
              internal = true;
            };

            flakeNixFile = l.mkOption {
              type = t.pathInStore;
              description = ''
                Generated content of the `flake.nix` file.
              '';
              visible = false;
              readOnly = true;
            };
          };

          config = {
            inherit flakeNixFile;
          };
        };
    in
    {
      config.nix4dev.lib.internal = {
        inherit flakeNixOptions;
      };
    };
}
