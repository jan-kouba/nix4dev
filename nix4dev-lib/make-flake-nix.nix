{
  lib,
  writeText,
  runCommand,
  ...
}: let
  l = lib // builtins;
  s = l.strings;

  printFlakeInputs = x:
    {
      "set" = ''
        {
          ${l.strings.concatStrings (l.attrsets.mapAttrsToList (name: value: ''"${name}" = ${printFlakeInputs value};'') x)}
        }
      '';
      "int" = l.toString x;
      "bool" =
        if x
        then "true"
        else "false";
      "string" = ''"${x}"'';
      "list" = "[ ${l.concatStringsSep " " (printFlakeInputs x)} ]";
      "float" = l.toString x;
    }
    ."${l.typeOf x}";

  makeFlakeNix = {
    flakeInputs,
    flakeDescription,
    treefmtConfig,
    flakePartsInputPathString, # e.g. "inputs.nix4dev.inputs.flake-parts"
    nixpkgsInputPathString, # e.g. "inputs.nix4dev.inputs.flake-parts"
    flakeConfigPathString, # e.g. "nix4dev.flake"
    flakeModulesStrings, # e.g. `[ "inputs.nix4dev.flakeModules.default" ]`
  }: let
    flakeNotFormatted = writeText "flake-not-formatted" ''
      # This file was generated by nix4dev.
      {
        ${
        l.strings.optionalString
        (flakeDescription != null)
        ''description = "${flakeDescription}";''
      }

        # To change flake inputs, use the `${flakeConfigPathString}.extraInputs` option.
        inputs = ${printFlakeInputs flakeInputs};

        outputs = inputs:
          ${flakePartsInputPathString}.lib.mkFlake
          {inherit inputs;}
          {
            imports =
              let
                l = ${nixpkgsInputPathString}.lib // builtins;
                assertFileExists = path: msg: assert (
                  l.asserts.assertMsg
                  (l.filesystem.pathIsRegularFile path)
                  msg
                ); path;
              in [
                ${s.concatStringsSep " " flakeModulesStrings}
                (
                  assertFileExists
                  ./flake-modules/default.nix
                  '''
                    Default flake module not found. To create an empty default module execute:

                    mkdir -p ./flake-modules
                    echo "{}" > ./flake-modules/default.nix

                    in the directory containing the flake.nix file.
                  '''
                )
              ];
          };
      }
    '';
    flakeNix = runCommand "format-flake" {} ''
      cat ${flakeNotFormatted} | ${treefmtConfig.package}/bin/treefmt --config-file ${treefmtConfig.build.configFile} --stdin out.nix > $out
    '';
  in
    flakeNix;
in {
  inherit printFlakeInputs makeFlakeNix;
}
